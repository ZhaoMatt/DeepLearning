# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import tflearn
from tflearn.data_preprocessing import ImagePreprocessing
import os
from tflearn.data_utils import image_preloader

tflearn.config.init_graph (seed=None, log_device=False, num_cores=0, gpu_memory_fraction=0.3, soft_placement=True)

def vgg16(input, num_class):
    #add trainable=False to let the parameters are not updated during training
    x = tflearn.conv_2d(input,64,3,scope='conv1_1',trainable=False)
    x = tflearn.conv_2d(x, 64, 3, activation='relu', scope='conv1_2',trainable=False)
    x = tflearn.max_pool_2d(x, 2, strides=2, name='maxpool1')

    x = tflearn.conv_2d(x, 128, 3, activation='relu', scope='conv2_1',trainable=False)
    x = tflearn.conv_2d(x, 128, 3, activation='relu', scope='conv2_2',trainable=False)
    x = tflearn.max_pool_2d(x, 2, strides=2, name='maxpool2')

    x = tflearn.conv_2d(x, 256, 3, activation='relu', scope='conv3_1',trainable=False)
    x = tflearn.conv_2d(x, 256, 3, activation='relu', scope='conv3_2',trainable=False)
    x = tflearn.conv_2d(x, 256, 3, activation='relu', scope='conv3_3',trainable=False)
    x = tflearn.max_pool_2d(x, 2, strides=2, name='maxpool3')

    x = tflearn.conv_2d(x, 512, 3, activation='relu', scope='conv4_1',trainable=False)
    x = tflearn.conv_2d(x, 512, 3, activation='relu', scope='conv4_2',trainable=False)
    x = tflearn.conv_2d(x, 512, 3, activation='relu', scope='conv4_3',trainable=False)
    x = tflearn.max_pool_2d(x, 2, strides=2, name='maxpool4')

    x = tflearn.conv_2d(x, 512, 3, activation='relu', scope='conv5_1')
    x = tflearn.conv_2d(x, 512, 3, activation='relu', scope='conv5_2')
    x = tflearn.conv_2d(x, 512, 3, activation='relu', scope='conv5_3')
    x = tflearn.max_pool_2d(x, 2, strides=2, name='maxpool5')

    x = tflearn.fully_connected(x, 4096, activation='relu', scope='fc6')
    x = tflearn.dropout(x, 0.5, name='dropout1')
    
    #we changed the structure here to let the fc only have 2048, less parameter, enough for our task
    x = tflearn.fully_connected(x, 2048, activation='relu', scope='fc7',restore=False)
    x = tflearn.dropout(x, 0.5, name='dropout2')
    
    x = tflearn.fully_connected(x,num_class,activation='softmax',scope='fc8',restore=False)
    
    return x

def vgg16basic(input_data, num_class):
    conv1 = tflearn.conv_2d(input_data, 96, 11, strides=4, activation='relu')
    pool1 = tflearn.max_pool_2d(conv1, 3, strides=2)
    network = tflearn.local_response_normalization(pool1)

    conv2 = tflearn.conv_2d(network, 256, 5, activation='relu')
    pool2 = tflearn.max_pool_2d(conv2, 3, strides=2)
    network = tflearn.local_response_normalization(pool2)

    conv3 = tflearn.conv_2d(network, 384, 3, activation='relu')
    conv4 = tflearn.conv_2d(conv3, 384, 3, activation='relu')
    conv5 = tflearn.conv_2d(conv4, 256, 3, activation='relu')
    pool3 = tflearn.max_pool_2d(conv5, 3, strides=2)
    network = tflearn.local_response_normalization(pool3)

    fc1 = tflearn.fully_connected(network, 4096, activation='tanh')
    dropout1 = tflearn.dropout(fc1, 0.5)

    fc2 = tflearn.fully_connected(dropout1, 2048, activation='tanh')
    dropout2 = tflearn.dropout(fc2, 0.5)

    fc3 = tflearn.fully_connected(dropout2, 2, activation='softmax')
    return fc3

# data_dir = "webemo_tr"
model_path = "."
#the file gen by generated by gen_files_list.py
files_list = "./train_fvgg_emo.txt"

X,Y = image_preloader(files_list,image_shape=(224,224),mode='file',categorical_labels=True,normalize=False,files_extension=['.png','.jpg'],filter_channel=True)

num_classes = 7

#VGG preprocessing
image_prep = ImagePreprocessing()
image_prep.add_featurewise_zero_center(mean=[123.68, 116.779, 103.939], per_channel=True)

# VGG Network
x = tflearn.input_data(shape=[None, 224, 224, 3], name='input',data_preprocessing=image_prep)   

softmax = vgg16(x, num_classes)

regression = tflearn.regression(softmax, optimizer='adam',
                                loss='categorical_crossentropy',
                                learning_rate=0.0001, restore=False)

model = tflearn.DNN(regression, checkpoint_path='vgg-finetuning',
                    max_checkpoints=3, tensorboard_verbose=2,
                    tensorboard_dir="./logs")

model_file = os.path.join(model_path, "vgg16.tflearn")

model.load(model_file, weights_only=True)   

# Start finetuning
model.fit(X, Y, n_epoch=20, validation_set=0.1, shuffle=True,show_metric=True, batch_size=64, snapshot_epoch=False, snapshot_step=200, run_id='vgg-finetuning')

model.save('vgg_finetune_emo.tfmodel')
